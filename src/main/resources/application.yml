server:
  port: 8080

spring:
    #排除 原生Druid的快速配置类
    autoconfigure:
      exclude: com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure
    datasource:
        druid:
         stat-view-servlet:
            loginUsername: admin
            loginPassword: 123456
            #IP白名单 (没有配置或者为空，则允许所有访问)
            allow:
            #允许清空统计数据
            reset-enable: false
            url-pattern: /druid/*
          #WebStatFilter用于采集web-jdbc关联监控的数据
         web-stat-filter:
           exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
        dynamic:
          druid: #以下是全局默认值，可以全局更改
           #<!-- 配置获取连接等待超时的时间 -->
            initial-size: 10
            max-active: 100
            min-idle: 10
            # <!-- 配置获取连接等待超时的时间 -->
            max-wait: 60000
            time-between-eviction-runs-millis: 2000
            min-evictable-idle-time-millis: 600000
            max-evictable-idle-time-millis: 900000
            test-while-idle: true
            test-on-borrow: false
            test-on-return: false
            validation-query: SELECT 1
            validation-query-timeout: 2000
            #合并多个DruidDataSource的监控数据
            use-global-datasource-stat: true
            async-init:
            clear-filters-enable:
            reset-stat-enable:
            not-full-timeout-retry-count:
            max-wait-thread-count:
            fail-fast:
            phyTimeout-millis:
            keep-alive: true
            pool-prepared-statements:
            init-variants:
            init-global-variants:
            use-unfair-lock:
            kill-when-socket-read-timeout:
            connection-properties:
            max-pool-prepared-statement-per-connection-size:
            init-connection-sqls:
            share-prepared-statements:
            connection-errorretry-attempts:
            break-after-acquire-failure:
            filters: stat,wall # 注意这个值和druid原生不一致，默认启动了stat,wall
            # 预防sql注入配置（https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter）
            wall:
              noneBaseStatementAllow:
              callAllow:
              #是否允许执行SELECT语句
              selectAllow: true
              #SELECT查询中是否允许INTO字句
              selectIntoAllow: true
              #这个是mysql注入攻击的常见手段
              selectIntoOutfileAllow: false
              #检查SELECT语句的WHERE子句是否是一个永真条件
              selectWhereAlwayTrueCheck: true
              #检查SELECT语句的HAVING子句是否是一个永真条件
              selectHavingAlwayTrueCheck: true
              #检测SELECT UNION
              selectUnionCheck: true
              #检测SELECT MINUS
              selectMinusCheck: true
              #检测SELECT EXCEPT
              selectExceptCheck: true
              #检测SELECT INTERSECT
              selectIntersectCheck: true
              #是否允许创建表
              createTableAllow: true
              #是否允许修改表
              dropTableAllow: true
              #是否允许执行Alter Table语句
              alterTableAllow: true
              #重命名表明
              renameTableAllow: true
              hintAllow:
              lockTableAllow:
              startTransactionAllow:
              blockAllow:
              conditionAndAlwayTrueAllow:
              conditionAndAlwayFalseAllow:
              conditionDoubleConstAllow:
              conditionLikeTrueAllow:
              selectAllColumnAllow:
              deleteAllow:
              deleteWhereAlwayTrueCheck:
              deleteWhereNoneCheck:
              updateAllow:
              updateWhereAlayTrueCheck:
              updateWhereNoneCheck:
              insertAllow:
              mergeAllow:
              minusAllow:
              intersectAllow:
              replaceAllow:
              setAllow:
              commitAllow:
              rollbackAllow:
              useAllow:
              multiStatementAllow:
              truncateAllow:
              commentAllow:
              strictSyntaxCheck:
              constArithmeticAllow:
              limitZeroAllow:
              describeAllow:
              showAllow:
              schemaCheck:
              tableCheck:
              functionCheck:
              objectCheck:
              variantCheck:
              mustParameterized:
              doPrivilegedAllow:
              dir:
              tenantTablePattern:
              tenantColumn:
              wrapAllow:
              metadataAllow:
              conditionOpXorAllow:
              conditionOpBitwseAllow:
              caseConditionConstAllow:
              completeInsertValuesCheck:
              insertValuesCheckSize:
              selectLimit:
            stat:
              #SQL合并配置
              merge-sql: true
              #慢SQL记录
              log-slow-sql: true
              slow-sql-millis: 3000
          datasource:
            master:
              username: root
              password: root
              driver-class-name: com.mysql.jdbc.Driver
              url: jdbc:mysql://127.0.0.1:3306/freeter?useUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false
              druid: # 以下参数针对每个库可以重新设置druid参数
                initial-size:



mybatis-plus:
    #枚举类 扫描路径，如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使
    type-enums-package: com.example.springboot_mybatisplus.enums
    #包扫描路径
    mapper-locations: classpath:mybatis/mappers/*Mapper.xml
    # MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，注册后在 Mapper 对应的 XML 文件中可以直接使用类名，而不用使用全限定的类名(即 XML 中调用的时候不用包含包名)
    global-config:
      db-config:
        id-type: id_worker
        #逻辑已删除值,(逻辑删除下有效
        logic-delete-value: 1
        #逻辑未删除值,(逻辑删除下有效)
        logic-not-delete-value: 0

    # 原生 MyBatis 所支持的配置
    # 原生Mybatis configuration,setting配置 http://www.mybatis.org/mybatis-3/zh/configuration.html#settings
    configuration:
        # 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射
        map-underscore-to-camel-case: true
        # 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true。
        cache-enabled: false
        jdbc-type-for-null: 'null'
        # 当设置为 true 的时候，懒加载的对象可能被任何懒属性全部加载，否则，每个属性都按需加载。需要和 lazyLoadingEnabled 一起使用
        aggressive-lazy-loading: true
        # MyBatis 自动映射策略，通过该配置可指定 MyBatis 是否并且如何来自动映射数据表字段与对象的属性
        #AutoMappingBehavior.NONE：不启用自动映射
        #AutoMappingBehavior.PARTIAL：只对非嵌套的 resultMap 进行自动映射
        #AutoMappingBehavior.FULL：对所有的 resultMap 都进行自动映射
        auto-mapping-behavior: partial
        #MyBatis 自动映射时未知列或未知属性处理策略，通过该配置可指定 MyBatis 在自动映射过程中遇到未知列或者未知属性时如何处理，总共有 3 种可选值：
        #AutoMappingUnknownColumnBehavior.NONE：不做任何处理 (默认值)
        #AutoMappingUnknownColumnBehavior.WARNING：以日志的形式打印相关警告信息
        #AutoMappingUnknownColumnBehavior.FAILING：当作映射失败处理，并抛出异常和详细信息
        auto-mapping-unknown-column-behavior: none
        # 3.0.8之前版本问题默认将枚举注册为EnumOrdinalTypeHandler,这是错误的方式,默认是 org.apache.ibatis.type.EnumTypeHandler
        # 如果项目之中实体统一使用IEnum或注解的方式,可配置成 com.baomidou.mybatisplus.extension.handlers.EnumTypeHandler,也可省略上面的type-enums-package配置
        # 配置type-enums-package只对注解方式的枚举处理能提前加载缓存.
        default-enum-type-handler: org.apache.ibatis.type.EnumOrdinalTypeHandler

# mybatis 日志打印
#logging:
#  level:
#   com.example.springboot_mybatisplus.mapper: debug